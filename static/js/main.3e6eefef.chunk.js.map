{"version":3,"sources":["component/Search.js","Vidstream.js","component/Episodelist.js","App.js","reportWebVitals.js","index.js"],"names":["Searchbar","_ref","onAnimeSelect","searchQuery","setSearchQuery","useState","searchResults","setSearchResults","showNoResultMessage","setShowNoResultMessage","isLoading","setIsLoading","navigate","useNavigate","cancelToken","useRef","displaySearchResults","async","data","query","page","url","concat","current","axios","CancelToken","source","get","token","err","isCancel","console","log","error","message","fetchData","results","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","disabled","length","map","result","key","id","title","src","image","alt","releaseDate","subOrDub","handleAnimeSelect","anime","Vidstream","selectedEpisode","onNextEpisode","videoUrl","setVideoUrl","selectedQuality","setSelectedQuality","sourceMap","useMemo","useEffect","episodeId","serverName","response","status","Error","sources","sourceIndex","isM3U8","defaultSource","ReactHLS","controls","width","onEnded","handleEnded","htmlFor","event","newQuality","quality","index","Episodes","animeId","useParams","episodeList","setEpisodeList","setSelectedEpisode","lastClickedEpisode","setLastClickedEpisode","handleNextEpisode","nextEpisodeIndex","nextEpisode","animeInfoUrl","episodes","episode","fetchEpisodeList","description","style","height","overflowY","handleEpisodeSelect","MyApp","setSelectedAnimeId","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter","App"],"mappings":"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","file":"static/js/main.3e6eefef.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const Search = () => {\r\n  return (\r\n    <div>Search</div>\r\n  );\r\n}\r\n\r\nexport function Searchbar({ onAnimeSelect }) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [showNoResultMessage, setShowNoResultMessage] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const baseApiUrl = \"https://api.consumet.org/anime/gogoanime/\";\r\n  const navigate = useNavigate();\r\n  const cancelToken = useRef(null);\r\n\r\n  const fetchData = async (query, page) => {\r\n    if (!query) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const url = `${baseApiUrl}${query}?page=${page}`;\r\n    cancelToken.current = axios.CancelToken.source();\r\n\r\n    try {\r\n      const { data } = await axios.get(url, { cancelToken: cancelToken.current.token });\r\n      return data;\r\n    } catch (err) {\r\n      if (axios.isCancel(err)) {\r\n        console.log('Request canceled');\r\n      } else {\r\n        console.error(err.message);\r\n        setSearchResults([]);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const query = e.target.value;\r\n    setSearchQuery(query);\r\n    displaySearchResults(query);\r\n  };\r\n\r\n  const displaySearchResults = async (query) => {\r\n    const data = await fetchData(query, 1);\r\n    setSearchResults(data?.results || []);\r\n    setShowNoResultMessage(true);\r\n  };\r\n\r\n  const handleAnimeSelect = (anime) => {\r\n    console.log(`Selected anime: ${anime.title} (ID: ${anime.id})`);\r\n    onAnimeSelect(anime.id);\r\n    navigate(`/episodes/${anime.id}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter anime title\"\r\n          value={searchQuery}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button onClick={() => displaySearchResults(searchQuery)} disabled={isLoading}>\r\n          {isLoading ? 'Searching...' : 'Search'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"search-results\">\r\n        {isLoading && <div className=\"loading-spinner\">Loading...</div>}\r\n\r\n        {showNoResultMessage && searchResults.length === 0 && !isLoading && (\r\n          <div className=\"no-result-message\">No Result</div>\r\n        )}\r\n\r\n        {searchResults.map(result => (\r\n          <div key={result.id} className=\"search-results-item\">\r\n            <h2>{result.title}</h2>\r\n            <p>ID: {result.id}</p>\r\n            <img src={result.image} alt={`${result.title} Poster`} />\r\n            <p>Release Date: {result.releaseDate || 'N/A'}</p>\r\n            <p>Sub or Dub: {result.subOrDub}</p>\r\n            <button className=\"select-anime-btn\" onClick={() => handleAnimeSelect(result)}>\r\n              Select Anime\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport ReactHLS from 'react-hls';\r\nimport './style.css';\r\n\r\nfunction Vidstream({ selectedEpisode, onNextEpisode }) {\r\n  const [videoUrl, setVideoUrl] = useState(null);\r\n  const [selectedQuality, setSelectedQuality] = useState('1080p');\r\n\r\n  const sourceMap = useMemo(() => ({\r\n    '360p': 0,\r\n    '480p': 1,\r\n    '720p': 2,\r\n    '1080p': 3,\r\n    'Default': 3,\r\n  }), []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (selectedEpisode) {\r\n          const episodeId = selectedEpisode.id;\r\n          const serverName = 'gogocdn';\r\n\r\n          const url = `https://api.consumet.org/anime/gogoanime/watch/${episodeId}?server=${serverName}`;\r\n          const response = await axios.get(url);\r\n\r\n          if (response.status === 200) {\r\n            const sources = response.data.sources;\r\n            const sourceIndex = sourceMap[selectedQuality];\r\n\r\n            if (sources[sourceIndex] && sources[sourceIndex].isM3U8) {\r\n              setVideoUrl(sources[sourceIndex].url);\r\n            } else {\r\n              console.error('Selected quality source not found. Fallback to default.');\r\n              const defaultSource = sources[3];\r\n              if (defaultSource && defaultSource.isM3U8) {\r\n                setVideoUrl(defaultSource.url);\r\n                setSelectedQuality('1080p');\r\n              } else {\r\n                console.error('No default source available');\r\n              }\r\n            }\r\n          } else {\r\n            throw new Error(`Failed to fetch data. Status: ${response.status}`);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedEpisode, selectedQuality, sourceMap]);\r\n\r\n  const handleQualityChange = (event) => {\r\n    const newQuality = event.target.value;\r\n    setSelectedQuality(newQuality);\r\n  };\r\n\r\n  const handleEnded = () => {\r\n    onNextEpisode();\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {videoUrl ? (\r\n        <div>\r\n          <ReactHLS\r\n            url={videoUrl}\r\n            controls={true}\r\n            width=\"100%\"\r\n            onEnded={handleEnded}\r\n          />\r\n          <div>\r\n            <label htmlFor=\"quality\">Select Quality: </label>\r\n            <select id=\"quality\" value={selectedQuality} onChange={handleQualityChange}>\r\n              {['360p', '480p', '720p', '1080p', 'Default'].map((quality, index) => (\r\n                <option key={index} value={quality}>\r\n                  {quality}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>Loading video...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Vidstream;","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Vidstream from '../Vidstream';\r\nimport { useParams } from 'react-router';\r\nimport './Episodelist.css';\r\nimport './style.css';\r\n\r\nexport function Episodes() {\r\n  const { animeId } = useParams();\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [selectedEpisode, setSelectedEpisode] = useState(null);\r\n  const [lastClickedEpisode, setLastClickedEpisode] = useState(null);\r\n\r\n  const handleNextEpisode = () => {\r\n    const selectedEpisodeIndex = lastClickedEpisode ? lastClickedEpisode.index : -1;\r\n    const nextEpisodeIndex = selectedEpisodeIndex + 1;\r\n\r\n    if (nextEpisodeIndex < episodeList.length) {\r\n      const nextEpisode = episodeList[nextEpisodeIndex];\r\n      setSelectedEpisode(nextEpisode);\r\n      setLastClickedEpisode(nextEpisode);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchEpisodeList = async () => {\r\n      try {\r\n        const animeInfoUrl = `https://api.consumet.org/anime/gogoanime/info/${animeId}`;\r\n        const response = await axios.get(animeInfoUrl);\r\n\r\n        if (response.status === 200) {\r\n          setEpisodeList(response.data.episodes.map((episode, index) => ({ ...episode, index })));\r\n        } else {\r\n          throw new Error(`Failed to fetch episode list. Status: ${response.status}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchEpisodeList();\r\n  }, [animeId]);\r\n\r\n  const handleEpisodeSelect = (episode) => {\r\n    console.log(`Clicked on episode: ${episode.title} (ID: ${episode.id})`);\r\n    setSelectedEpisode(episode);\r\n    setLastClickedEpisode(episode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Anime Episode List for {animeId}</h1>\r\n      <div className=\"content-wrapper\">\r\n        {selectedEpisode && (\r\n          <div className=\"video-player\">\r\n            <h2>Selected Episode: {selectedEpisode.title} ({selectedEpisode.id})</h2>\r\n            <p>{selectedEpisode.description}</p>\r\n            <Vidstream selectedEpisode={selectedEpisode} onNextEpisode={handleNextEpisode} />\r\n          </div>\r\n        )}\r\n        <div className=\"episode-list-container\" style={{ height: '300px', overflowY: 'auto' }}>\r\n          <div className=\"episode-list\">\r\n            {episodeList.map((episode) => (\r\n              <button\r\n                className={`episode-button ${selectedEpisode?.id === episode.id ? 'selected' : ''}`}\r\n                onClick={() => handleEpisodeSelect(episode)}\r\n                key={episode.id}\r\n              >\r\n                {episode.index + 1} {episode.title}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"episode-navigation\">\r\n          {selectedEpisode && (\r\n            <button className=\"episode-button\" onClick={handleNextEpisode}>\r\n              Next Episode\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\nimport { Searchbar } from './component/Search'; \nimport { Episodes } from './component/Episodelist';\nimport { Routes, Route } from 'react-router-dom';\nimport './style.css';\n\nfunction MyApp() {\n  const [, setSelectedAnimeId] = useState(null);\n\n  // Callback function to set the selected anime ID\n  const handleAnimeSelect = (animeId) => {\n    setSelectedAnimeId(animeId);\n  };\n\n  return (\n    <div>\n      <Routes>\n        <Route path='shig/' element={<Searchbar onAnimeSelect={handleAnimeSelect} />} />\n        <Route path='episodes/:animeId' element={<Episodes />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default MyApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}